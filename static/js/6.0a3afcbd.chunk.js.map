{"version":3,"sources":["utils/latinise.ts","components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","hooks/useDelayedUnmount.ts","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/SearchInput.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx","utils/bscscan.ts","components/Select/Select.tsx","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx"],"names":["Latinise","latin_map","τ","Τ","latinise","input","replace","x","Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","t","useTranslation","aria-label","role","color","bold","defaultProps","ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol","alignItems","mb","src","alt","flexDirection","split","variant","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","onChange","onSelectMax","value","inputTitle","isBalanceZero","style","position","pl","fontSize","balance","balanceNumber","Number","toLocaleString","undefined","maximumFractionDigits","displayBalance","pattern","inputMode","step","min","placeholder","scale","mr","external","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","valNumber","BigNumber","fullBalanceNumber","handleChange","useCallback","e","currentTarget","validity","valid","handleSelectMax","title","disabled","isFinite","eq","gt","a","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStake","onUnstake","useUnstake","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","handleStake","amount","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceNumber","getBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","some","item","pathname","includes","HarvestAction","earnings","onReward","useHarvest","cakePrice","usePriceCakeBusd","rawEarningsBalance","earningsBusd","multipliedBy","toNumber","CardBusdValue","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","lpContract","getBep20Contract","onApprove","useApprove","handleApprove","console","error","textTransform","pr","mt","UnlockButton","ApyButton","apr","ApyCalculatorModal","linkLabel","tokenPrice","linkHref","onPresentApyModal","event","stopPropagation","ml","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","card","background","isPromotedFarm","radii","Divider","cardBorder","ExpandingWrapper","FarmCard","showExpandableSection","setShowExpandableSection","toLocaleLowerCase","liquidity","earnLabel","dual","farmAPR","liquidityUrlPathParts","quoteToken","address","token","BASE_ADD_LIQUIDITY_URL","isCommunity","display","CardActionsContainer","getBscScanAddressUrl","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","useEffect","timeoutId","setTimeout","clearTimeout","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","Farm","image","label","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","ActionContainer","xl","ActionTitles","Title","Subtle","ActionContent","Staked","earningsBigNumber","isZero","useCountUp","start","end","duration","separator","decimals","countUp","update","updateValue","useRef","current","marginBottom","marginTop","expandAnimation","collapseAnimation","css","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","bsc","info","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isXs","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","InputWrapper","SearchInput","onChangeCallback","setToggled","searchText","setSearchText","debouncedOnChange","debounce","target","onBlur","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","usePersistState","setViewMode","sortOption","setSortOption","isArchived","isInactive","usePollFarmsData","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","times","getFarmApr","poolWeight","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","PageHeader","Page","checked","Select","options","option","marginLeft","sort","b","exact","renderContent","BASE_BSC_SCAN_URL","getBscScanTransactionUrl","transactionHash","getBscScanBlockNumberUrl","block","DropDownHeader","inputSecondary","DropDownListContainer","zIndices","dropdown","DropDownContainer","isOpen","boxShadow","DropDownList","ul","ListItem","li","containerRef","dropdownRef","setIsOpen","selectedOption","setSelectedOption","containerSize","setContainerSize","toggling","onOptionClicked","offsetWidth","offsetHeight","CardValue","lineHeight","prefix"],"mappings":"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","file":"static/js/6.0a3afcbd.chunk.js","sourcesContent":["export const Latinise = {\n  latin_map: {\n    τ: 't',\n    Τ: 'T',\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? t('Hide') : t('Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\n  const firstPart =\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap/uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n    const balanceNumber = Number(balance)\n    if (balanceNumber > 0 && balanceNumber < 0.0001) {\n      return balanceNumber.toLocaleString(undefined, { maximumFractionDigits: 20 })\n    }\n    return balanceNumber.toLocaleString()\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern=\"^[0-9]*[.,]?[0-9]*$\"\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, LinkExternal } from '@pancakeswap/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get %symbol%', { symbol: tokenName })}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceNumber.toLocaleString()\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useWeb3React } from '@web3-react/core'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport CardBusdValue from '../../../Home/components/CardBusdValue'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0\n  const displayBalance = rawEarningsBalance.toLocaleString()\n  const earningsBusd = rawEarningsBalance ? new BigNumber(rawEarningsBalance).multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>\n        {displayBalance}\n        {earningsBusd > 0 && <CardBusdValue value={earningsBusd} />}\n      </Heading>\n      <Button\n        disabled={rawEarningsBalance === 0 || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          await onReward()\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n          setPendingTx(false)\n        }}\n      >\n        {t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { provider as ProviderType } from 'web3-core'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useWeb3 from 'hooks/useWeb3'\nimport { useApprove } from 'hooks/useApprove'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  provider?: ProviderType\n  account?: string\n  addLiquidityUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n  } = farm.userData || {}\n  const allowance = new BigNumber(allowanceAsString)\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n  const earnings = new BigNumber(earningsAsString)\n  const lpAddress = getAddress(lpAddresses)\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const web3 = useWeb3()\n  const dispatch = useAppDispatch()\n\n  const lpContract = getBep20Contract(lpAddress, web3)\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {t('Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          CAKE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apr?: number\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      tokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      linkHref={addLiquidityUrl}\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\n      <CalculateIcon width=\"18px\" />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap/uikit'\nimport { Farm } from 'state/types'\nimport { provider as ProviderType } from 'web3-core'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  liquidity?: BigNumber\n}\n\nconst AccentGradient = keyframes`  \n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\n  background-size: 400% 400%;\n  animation: ${AccentGradient} 2s linear infinite;\n  border-radius: 32px;\n  position: absolute;\n  top: -1px;\n  right: -1px;\n  bottom: -3px;\n  left: -1px;\n  z-index: -1;\n`\n\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  provider?: ProviderType\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n\n  const totalValueFormatted =\n    farm.liquidity && farm.liquidity.gt(0)\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : ''\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'CAKE'\n\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\n\n  return (\n    <FCard isPromotedFarm={isPromotedFarm}>\n      {isPromotedFarm && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={farm.isCommunity}\n        farmImage={farmImage}\n        tokenSymbol={farm.token.symbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{t('APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apr ? (\n              <>\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\n                {farmAPR}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={getBscScanAddressUrl(farm.lpAddresses[process.env.REACT_APP_CHAIN_ID])}\n          infoAddress={`https://pancakeswap.info/pair/${lpAddress}`}\n          totalValueFormatted={totalValueFormatted}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import { useState, useEffect } from 'react'\n\n/**\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\n * This hook \"shows\" element immediately when the isMounted is true\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\n * delayTime should be the same as animation time in most cases.\n */\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\n  const [shouldRender, setShouldRender] = useState(false)\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>\n    if (isMounted && !shouldRender) {\n      setShouldRender(true)\n    } else if (!isMounted && shouldRender) {\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\n    }\n    return () => clearTimeout(timeoutId)\n  }, [isMounted, delayTime, shouldRender])\n  return shouldRender\n}\n\nexport default useDelayedUnmount\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  lpLabel: string\n  tokenAddress?: Address\n  quoteTokenAddress?: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {!hideButton && (\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\n          )}\n        </>\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text, Image } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  image: string\n}\n\nconst IconImage = styled(Image)`\n  width: 24px;\n  height: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n    height: 40px;\n  }\n`\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <IconImage src={`/images/farms/${image}.svg`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <div>\n      {t('The multiplier represents the amount of CAKE rewards each farm gets.')}\n      <br />\n      <br />\n      {t('For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.')}\n    </div>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n  margin-bottom: 8px;\n`\n\nexport const Title = styled.span`\n  color: ${({ theme }) => theme.colors.secondary};\n`\n\n// TODO: Use `Text` instead\nexport const Subtle = styled.span`\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n\nexport const Staked = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n","import React, { useState, useRef, useEffect } from 'react'\nimport { Button, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCountUp } from 'react-countup'\n\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = 0\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceNumber(earningsBigNumber)\n    earningsBusd = new BigNumber(earnings).multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toLocaleString()\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: earningsBusd,\n    duration: 1,\n    separator: ',',\n    decimals: 3,\n  })\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(earningsBusd)\n  }, [earningsBusd, updateValue])\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Title>CAKE </Title>\n        <Subtle>{t('Earned').toUpperCase()}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          {countUp > 0 && <Staked>~{countUp}USD</Staked>}\n        </div>\n        <Button\n          disabled={!earnings || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n            setPendingTx(false)\n          }}\n          ml=\"4px\"\n        >\n          {t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport UnlockButton from 'components/UnlockButton'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser } from 'state/hooks'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { useApprove } from 'hooks/useApprove'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport useWeb3 from 'hooks/useWeb3'\n\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  lpSymbol,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const web3 = useWeb3()\n  const location = useLocation()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceNumber.toLocaleString()\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = getBep20Contract(lpAddress, web3)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{t('Start Farming').toUpperCase()}</Subtle>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Title>{lpSymbol} </Title>\n            <Subtle>{t('Staked').toUpperCase()}</Subtle>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance()}</Earned>\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{t('Stake').toUpperCase()} </Subtle>\n          <Title>{lpSymbol}</Title>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{t('Start Farming').toUpperCase()}</Subtle>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Subtle>{t('Enable Farm').toUpperCase()}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const bsc = getBscScanAddressUrl(lpAddress)\n  const info = `https://pancakeswap.info/pair/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n              {t('Get %symbol%', { symbol: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/farms':\n      activeIndex = 0\n      break\n    case '/farms/history':\n      activeIndex = 1\n      break\n    case '/farms/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React, { useState, useMemo } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Input } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport debounce from 'lodash/debounce'\n\nconst StyledInput = styled(Input)`\n  border-radius: 16px;\n  margin-left: auto;\n`\n\nconst InputWrapper = styled.div`\n  position: relative;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 234px;\n    display: block;\n  }\n`\n\nconst Container = styled.div<{ toggled: boolean }>``\n\ninterface Props {\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback }) => {\n  const { t } = useTranslation()\n  const [toggled, setToggled] = useState(false)\n  const [searchText, setSearchText] = useState('')\n\n  const debouncedOnChange = useMemo(\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\n    [onChangeCallback],\n  )\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchText(e.target.value)\n    debouncedOnChange(e)\n  }\n\n  return (\n    <Container toggled={toggled}>\n      <InputWrapper>\n        <StyledInput\n          value={searchText}\n          onChange={onChange}\n          placeholder={t('Search Farms')}\n          onBlur={() => setToggled(false)}\n        />\n      </InputWrapper>\n    </Container>\n  )\n}\n\nexport default SearchInput\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\nimport { ViewMode } from '../types'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/hooks'\nimport usePersistState from 'hooks/usePersistState'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport PageHeader from 'components/PageHeader'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport SearchInput from './components/SearchInput'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, 'pancake_farm_view')\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  usePollFarmsData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\n  useEffect(() => {\n    setStakedOnly(!isActive)\n  }, [isActive])\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const apr = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity) : 0\n\n        return { ...farm, apr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n\n  const farmsStakedMemoized = useMemo(() => {\n    let farmsStaked = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [farmsStakedMemoized, observerIsSet])\n\n  const rowData = farmsStakedMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\n        label: lpLabel,\n        pid: farm.pid,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <div>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\n            ))}\n          </Route>\n          <Route exact path={`${path}/archived`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\n            ))}\n          </Route>\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <PageHeader>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n          {t('Farms')}\n        </Heading>\n        <Heading scale=\"lg\" color=\"text\">\n          {t('Stake Liquidity Pool (LP) tokens to earn.')}\n        </Heading>\n      </PageHeader>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\n              <Select\n                options={[\n                  {\n                    label: t('Hot'),\n                    value: 'hot',\n                  },\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  },\n                  {\n                    label: t('Multiplier'),\n                    value: 'multiplier',\n                  },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        <div ref={loadMoreRef} />\n        <StyledImage src=\"/images/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n","import { BASE_BSC_SCAN_URL } from 'config'\n\nexport const getBscScanAddressUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getBscScanTransactionUrl = (transactionHash: string) => {\n  return `${BASE_BSC_SCAN_URL}/tx/${transactionHash}`\n}\n\nexport const getBscScanBlockNumberUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/${block}`\n}\n\nexport const getBscScanBlockCountdownUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/countdown/${block}`\n}\n","import React, { useState, useRef, useEffect } from 'react'\nimport styled, { css } from 'styled-components'\nimport { ArrowDropDownIcon, Text } from '@pancakeswap/uikit'\n\nconst DropDownHeader = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0px 16px;\n  box-shadow: ${({ theme }) => theme.shadows.inset};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 16px;\n  background: ${({ theme }) => theme.colors.input};\n  transition: border-radius 0.15s;\n`\n\nconst DropDownListContainer = styled.div`\n  min-width: 136px;\n  height: 0;\n  position: absolute;\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.input};\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  opacity: 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n`\n\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\n  cursor: pointer;\n  width: ${({ width }) => width}px;\n  position: relative;\n  background: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  height: 40px;\n  min-width: 136px;\n  user-select: none;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n\n  ${(props) =>\n    props.isOpen &&\n    css`\n      ${DropDownHeader} {\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n        border-radius: 16px 16px 0 0;\n      }\n\n      ${DropDownListContainer} {\n        height: auto;\n        transform: scaleY(1);\n        opacity: 1;\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        border-top-width: 0;\n        border-radius: 0 0 16px 16px;\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n      }\n    `}\n\n  svg {\n    position: absolute;\n    right: 16px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n`\n\nconst DropDownList = styled.ul`\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n`\n\nconst ListItem = styled.li`\n  list-style: none;\n  padding: 8px 16px;\n  &:hover {\n    background: ${({ theme }) => theme.colors.inputSecondary};\n  }\n`\n\nexport interface SelectProps {\n  options: OptionProps[]\n  onChange?: (option: OptionProps) => void\n}\n\nexport interface OptionProps {\n  label: string\n  value: any\n}\n\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\n  const containerRef = useRef(null)\n  const dropdownRef = useRef(null)\n  const [isOpen, setIsOpen] = useState(false)\n  const [selectedOption, setSelectedOption] = useState(options[0])\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\n\n  const toggling = () => setIsOpen(!isOpen)\n\n  const onOptionClicked = (option: OptionProps) => () => {\n    setSelectedOption(option)\n    setIsOpen(false)\n\n    if (onChange) {\n      onChange(option)\n    }\n  }\n\n  useEffect(() => {\n    setContainerSize({\n      width: dropdownRef.current.offsetWidth, // Consider border\n      height: dropdownRef.current.offsetHeight,\n    })\n  }, [])\n\n  return (\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\n      {containerSize.width !== 0 && (\n        <DropDownHeader onClick={toggling}>\n          <Text>{selectedOption.label}</Text>\n        </DropDownHeader>\n      )}\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\n      <DropDownListContainer>\n        <DropDownList ref={dropdownRef}>\n          {options.map((option) =>\n            option.label !== selectedOption.label ? (\n              <ListItem onClick={onOptionClicked(option)} key={option.label}>\n                <Text>{option.label}</Text>\n              </ListItem>\n            ) : null,\n          )}\n        </DropDownList>\n      </DropDownListContainer>\n    </DropDownContainer>\n  )\n}\n\nexport default Select\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap/uikit'\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = '40px',\n  lineHeight = '1',\n  prefix = '',\n  bold = true,\n  color = 'text',\n}) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport CardValue, { CardValueProps } from './CardValue'\n\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\n  return (\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\n  )\n}\n\nexport default CardBusdValue\n"],"sourceRoot":""}