{"version":3,"sources":["views/Staking/components/PoolCard/AprRow.tsx","views/Staking/components/PoolCard/StyledCard.tsx","views/Staking/components/PoolCard/CardFooter/ExpandedFooter.tsx","views/Staking/components/PoolCard/CardFooter/index.tsx","views/Staking/components/PoolCard/StyledCardHeader.tsx","views/Staking/components/PoolCard/CardActions/ApprovalAction.tsx","views/Staking/components/PoolCard/Modals/NotEnoughTokensModal.tsx","views/Staking/components/PoolCard/Modals/PercentageButton.tsx","views/Staking/components/PoolCard/Modals/StakeModal.tsx","views/Staking/components/PoolCard/CardActions/StakeActions.tsx","views/Staking/components/PoolCard/Modals/CollectModal.tsx","views/Staking/components/PoolCard/CardActions/HarvestActions.tsx","views/Staking/components/PoolCard/CardActions/index.tsx","views/Staking/components/PoolCard/index.tsx","views/Staking/components/CakeVaultCard/VaultCardActions/VaultApprovalAction.tsx","views/Staking/helpers.tsx","views/Staking/components/CakeVaultCard/WithdrawalFeeTimer.tsx","views/Staking/components/CakeVaultCard/UnstakingFeeCountdownRow.tsx","views/Staking/components/CakeVaultCard/FeeSummary.tsx","views/Staking/components/CakeVaultCard/VaultStakeModal.tsx","views/Staking/components/CakeVaultCard/VaultCardActions/HasSharesActions.tsx","views/Staking/components/CakeVaultCard/VaultCardActions/VaultStakeActions.tsx","views/Staking/components/CakeVaultCard/VaultCardActions/index.tsx","views/Staking/components/CakeVaultCard/RecentCakeProfitBalance.tsx","views/Staking/components/CakeVaultCard/RecentCakeProfitRow.tsx","views/Staking/components/CakeVaultCard/index.tsx","views/Staking/index.tsx"],"names":["AprRow","pool","isAutoVault","compoundFrequency","performanceFee","t","useTranslation","stakingToken","earningToken","totalStaked","tokenPerBlock","isFinished","tooltipContent","useTooltip","placement","earningTokenPrice","targetRef","tooltip","tooltipVisible","useBusdPriceFromToken","symbol","earningTokenPriceAsNumber","toNumber","stakingTokenPrice","stakingTokenPriceAsNumber","apr","getPoolApr","getBalanceNumber","decimals","parseFloat","isHighValueToken","Math","round","apyModalLink","address","BASE_EXCHANGE_URL","process","useModal","ApyCalculatorModal","tokenPrice","linkLabel","linkHref","earningTokenSymbol","roundingDecimals","alignItems","justifyContent","Balance","fontSize","value","unit","bold","PromotedGradient","keyframes","StyledCard","styled","Card","theme","colors","isPromoted","css","primaryBright","secondary","props","card","background","isDesktop","mediaQueries","sm","StyledCardInner","Box","isPromotedPool","radii","ExpandedWrapper","Flex","ExpandedFooter","account","currentBlock","useBlock","useCakeVault","totalCakeInVault","fees","startBlock","endBlock","contractAddress","sousId","tokenAddress","getAddress","poolContractAddress","cakeVaultContractAddress","getCakeVaultAddress","imageSrc","BASE_URL","toLowerCase","isMetaMaskInScope","window","ethereum","isMetaMask","isManualCakePool","shouldShowBlockCountdown","Boolean","blocksUntilStart","max","blocksRemaining","hasPoolStarted","flexDirection","mb","small","manualCakeTotalMinusAutoVault","BigNumber","minus","getTotalStakedBalance","ml","width","height","color","textTransform","ref","href","projectLink","BASE_BSC_SCAN_URL","variant","p","onClick","registerToken","React","memo","ExpandableButtonWrapper","Footer","useState","isExpanded","setIsExpanded","manualTooltipText","autoTooltipText","expanded","Wrapper","CardHeader","backgroundDisabled","gradients","StyledCardHeader","stakingTokenSymbol","isStaking","poolImageSrc","toLocaleLowerCase","isCakePool","scale","src","alt","ApprovalAction","isLoading","stakingTokenContract","useERC20","requestedApproval","setRequestedApproval","onApprove","useSousApprove","useToast","toastSuccess","toastError","handleApprove","useCallback","a","console","error","message","endIcon","spin","disabled","StyledLink","Link","NotEnoughTokensModal","tokenSymbol","onDismiss","useTheme","title","headerBackground","cardHeader","mt","as","external","StyledButton","Button","PercentageButton","children","mx","StakeModal","isBnbPool","stakingTokenBalance","isRemovingStake","userData","stakingLimit","onStake","useSousStake","onUnstake","useSousUnstake","enableEmergencyWithdraw","pendingTx","setPendingTx","stakeAmount","setStakeAmount","hasReachedStakeLimit","setHasReachedStakedLimit","percent","setPercent","getCalculatedStakingLimit","stakedBalance","gt","usdValueStaked","formatNumber","times","useEffect","fullDecimalStakeAmount","getDecimalAmount","plus","handleChangePercent","sliderPercent","percentageOfStakingMax","dividedBy","multipliedBy","amountToStake","getFullDisplayBalance","handleConfirmClick","style","textAlign","amount","token","minWidth","onUserInput","input","convertedInput","percentage","floor","min","currencyValue","isWarning","balance","onValueChanged","name","valueLabel","step","StakeAction","isStaked","stakedTokenBalance","stakedTokenDollarBalance","onPresentTokenRequired","onPresentStake","onPresentUnstake","reachStakingLimit","gte","prefix","mr","CollectModal","formattedBalance","fullBalance","earningsDollarValue","isCompoundPool","onReward","useSousHarvest","shouldCompound","setShouldCompound","tooltipOffset","handleHarvestConfirm","activeIndex","onItemClick","index","pb","HarvestActions","earnings","earningTokenBalance","earningTokenDollarBalance","hasEarnings","onPresentCollect","display","InlineText","Text","CardActions","harvest","poolCategory","PoolCategory","BINANCE","allowance","BIG_ZERO","pendingReward","needsApproval","StakeActions","PoolCard","accountHasStakedBalance","ribbon","variantColor","text","UnlockButton","CardFooter","setLastUpdated","useWeb3React","cakeVaultContract","useCakeVaultContract","cakeContract","useCake","methods","approve","options","ethers","constants","MaxUint256","send","from","on","convertCakeToShares","cake","cakePerFullShare","decimalsToRound","sharePriceNumber","amountInShares","sharesAsNumberBalance","sharesAsBigNumber","sharesAsDisplayBalance","WithdrawalFeeTimer","secondsRemaining","getTimePeriods","days","hours","minutes","day","hour","minute","UnstakingFeeCountdownRow","lastDepositedTime","userShares","withdrawalFee","withdrawalFeePeriod","feeAsDecimal","fee","useWithdrawalFeeTimer","parseInt","hasUnstakingFee","noFeeToPay","shouldShowTimer","FeeSummary","feeInCake","toFixed","VaultStakeModal","stakingMax","dispatch","useAppDispatch","pricePerFullShare","cakePriceBusd","usePriceCakeBusd","handleWithdrawal","convertedStakeAmount","shareStakeToWithdraw","triggerWithdrawAllThreshold","sharesRemaining","lte","withdrawAll","fetchCakeVaultUserData","withdraw","toString","handleDeposit","deposit","BIG_TEN","pow","HasSharesActions","shares","amountInCake","cakeAsNumberBalance","cakeAsBigNumber","cakeAsDisplayBalance","convertSharesToCake","stakedDollarValue","VaultStakeActions","accountHasSharesStaked","CakeVaultCardActions","useLastUpdated","lastUpdated","isVaultApproved","setIsVaultApproved","call","response","currentAllowance","checkApprovalStatus","VaultApprovalAction","RecentCakeProfitBalance","cakeToDisplay","dollarValueToDisplay","dateStringToDisplay","RecentCakeProfitCountdownRow","cakeAtLastUserAction","lastUserActionTime","shouldDisplayCakeProfit","cakeProfit","dollarValueOfCake","lastActionInMs","Date","toLocaleString","StyledCardBody","CardBody","CakeVaultCard","showStakedOnly","isXl","useMatchBreakpoints","isVaultUserDataLoading","performanceFeeAsDecimal","RecentCakeProfitRow","VaultCardActions","GaurPool","Pools","path","useRouteMatch","pools","usePools","usePersistState","stakedOnly","setNumberOfPoolsVisible","observerIsSet","setObserverIsSet","loadMoreRef","useRef","useMemo","partition","finishedPools","openPools","stakedOnlyFinishedPools","filter","isGreaterThan","length","find","useFetchCakeVault","useFetchPublicPoolsData","usePollFarmsData","IntersectionObserver","entries","isIntersecting","poolsCurrentlyVisible","rootMargin","threshold","observe","current","PageHeader","Page","exact"],"mappings":"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","file":"static/js/15.2cdbd44c.chunk.js","sourcesContent":["import React from 'react'\nimport { Flex, TooltipText, IconButton, useModal, CalculateIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getPoolApr } from 'utils/apr'\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\nimport { useBusdPriceFromToken } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { Pool } from 'state/types'\nimport { BASE_EXCHANGE_URL } from 'config'\n\ninterface AprRowProps {\n  pool: Pool\n  isAutoVault?: boolean\n  compoundFrequency?: number\n  performanceFee?: number\n}\n\nconst AprRow: React.FC<AprRowProps> = ({ pool, isAutoVault = false, compoundFrequency = 1, performanceFee = 0 }) => {\n  const { t } = useTranslation()\n  const { stakingToken, earningToken, totalStaked, isFinished, tokenPerBlock } = pool\n\n  const tooltipContent = isAutoVault\n    ? t('APY includes compounding, APR doesn’t. This pool’s CAKE is compounded automatically, so we show APY.')\n    : t('This pool’s rewards aren’t compounded automatically, so we show APR')\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\n\n  const earningTokenPrice = useBusdPriceFromToken(earningToken.symbol)\n  const earningTokenPriceAsNumber = earningTokenPrice && earningTokenPrice.toNumber()\n\n  const stakingTokenPrice = useBusdPriceFromToken(stakingToken.symbol)\n  const stakingTokenPriceAsNumber = stakingTokenPrice && stakingTokenPrice.toNumber()\n\n  const apr = getPoolApr(\n    stakingTokenPriceAsNumber,\n    earningTokenPriceAsNumber,\n    getBalanceNumber(totalStaked, stakingToken.decimals),\n    parseFloat(tokenPerBlock),\n  )\n\n  // special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\n  const isHighValueToken = Math.round(earningTokenPriceAsNumber / 1000) > 0\n  const roundingDecimals = isHighValueToken ? 4 : 2\n\n  const earningsPercentageToDisplay = () => {\n    if (isAutoVault) {\n      const oneThousandDollarsWorthOfToken = 1000 / earningTokenPriceAsNumber\n      const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n        numberOfDays: 365,\n        farmApr: apr,\n        tokenPrice: earningTokenPriceAsNumber,\n        roundingDecimals,\n        compoundFrequency,\n        performanceFee,\n      })\n      return getRoi({\n        amountEarned: tokenEarnedPerThousand365D,\n        amountInvested: oneThousandDollarsWorthOfToken,\n      })\n    }\n    return apr\n  }\n\n  const apyModalLink =\n    stakingToken.address &&\n    `${BASE_EXCHANGE_URL}/#/swap?outputCurrency=${stakingToken.address[process.env.REACT_APP_CHAIN_ID]}`\n\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      tokenPrice={earningTokenPriceAsNumber}\n      apr={apr}\n      linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\n      linkHref={apyModalLink || BASE_EXCHANGE_URL}\n      earningTokenSymbol={earningToken.symbol}\n      roundingDecimals={isHighValueToken ? 4 : 2}\n      compoundFrequency={compoundFrequency}\n      performanceFee={performanceFee}\n    />,\n  )\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Flex alignItems=\"center\">\n          <Balance\n            fontSize=\"16px\"\n            value={1000}\n            decimals={2}\n            unit=\"%\"\n            bold\n          />\n         \n        </Flex>\n    </Flex>\n  )\n}\n\nexport default AprRow\n","import styled, { css, keyframes } from 'styled-components'\nimport { Card, Box } from '@pancakeswap/uikit'\n\nconst PromotedGradient = keyframes`\n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\ninterface PromotedStyleCardProps {\n  isDesktop: boolean\n}\n\nexport const StyledCard = styled(Card)<{ isPromoted?: PromotedStyleCardProps; isFinished?: boolean }>`\n  max-width: 352px;\n  margin: 0 8px 24px;\n  display: flex;\n  flex-direction: column;\n  align-self: baseline;\n  position: relative;\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n\n  ${({ isPromoted, theme }) =>\n    isPromoted\n      ? css`\n          background: linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary});\n          padding: 1px 1px 3px 1px;\n          background-size: 400% 400%;\n        `\n      : `background: ${(props) => props.theme.card.background};`}\n\n  ${({ isPromoted }) =>\n    isPromoted &&\n    isPromoted.isDesktop &&\n    css`\n      animation: ${PromotedGradient} 3s ease infinite;\n    `}\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 0 12px 46px;\n  }\n`\n\nexport const StyledCardInner = styled(Box)<{ isPromotedPool?: boolean }>`\n  background: ${({ theme }) => theme.card.background};\n  border-radius: ${({ isPromotedPool, theme }) => (isPromotedPool ? '31px' : theme.radii.card)};\n`\n\nexport default StyledCard\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport {\n  Flex,\n  MetamaskIcon,\n  Text,\n  TooltipText,\n  LinkExternal,\n  TimerIcon,\n  Skeleton,\n  useTooltip,\n  Button,\n} from '@pancakeswap/uikit'\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\nimport { useBlock, useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\nimport { registerToken } from 'utils/wallet'\nimport Balance from 'components/Balance'\n\ninterface ExpandedFooterProps {\n  pool: Pool\n  account: string\n  isAutoVault?: boolean\n}\n\nconst ExpandedWrapper = styled(Flex)`\n  svg {\n    height: 14px;\n    width: 14px;\n  }\n`\n\nconst ExpandedFooter: React.FC<ExpandedFooterProps> = ({ pool, account, isAutoVault = false }) => {\n  const { t } = useTranslation()\n  const { currentBlock } = useBlock()\n  const {\n    totalCakeInVault,\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const { stakingToken, earningToken, totalStaked, startBlock, endBlock, isFinished, contractAddress, sousId } = pool\n\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getCakeVaultAddress()\n  const imageSrc = `${BASE_URL}/images/tokens/${earningToken.symbol.toLowerCase()}.png`\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\n  const isManualCakePool = sousId === 0\n\n  const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock)\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0)\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0)\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Subtracted automatically from each yield harvest and burned.'),\n    { placement: 'bottom-start' },\n  )\n\n  const getTotalStakedBalance = () => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }\n\n  return (\n    <ExpandedWrapper flexDirection=\"column\">\n      <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Text small>{t('Total staked')}:</Text>\n        <Flex alignItems=\"flex-start\">\n          {totalStaked ? (\n            <>\n              <Balance fontSize=\"14px\" value={getTotalStakedBalance()} />\n              <Text ml=\"4px\" fontSize=\"14px\">\n                {stakingToken.symbol}\n              </Text>\n            </>\n          ) : (\n            <Skeleton width=\"90px\" height=\"21px\" />\n          )}\n        </Flex>\n      </Flex>\n      {shouldShowBlockCountdown && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Text small>{hasPoolStarted ? t('End') : t('Start')}:</Text>\n          <Flex alignItems=\"center\">\n            {blocksRemaining || blocksUntilStart ? (\n              <Balance\n                color=\"primary\"\n                fontSize=\"14px\"\n                value={hasPoolStarted ? blocksRemaining : blocksUntilStart}\n                decimals={0}\n              />\n            ) : (\n              <Skeleton width=\"54px\" height=\"21px\" />\n            )}\n            <Text ml=\"4px\" color=\"primary\" small textTransform=\"lowercase\">\n              {t('Blocks')}\n            </Text>\n            <TimerIcon ml=\"4px\" color=\"primary\" />\n          </Flex>\n        </Flex>\n      )}\n      {isAutoVault && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          {tooltipVisible && tooltip}\n          <TooltipText ref={targetRef} small>\n            {t('Performance Fee')}\n          </TooltipText>\n          <Flex alignItems=\"center\">\n            <Text ml=\"4px\" small>\n              {performanceFee / 100}%\n            </Text>\n          </Flex>\n        </Flex>\n      )}\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal bold={false} small href={earningToken.projectLink}>\n          {t('View Project Site')}\n        </LinkExternal>\n      </Flex>\n      {poolContractAddress && (\n        <Flex mb=\"2px\" justifyContent=\"flex-end\">\n          <LinkExternal\n            bold={false}\n            small\n            href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\n          >\n            {t('View Contract')}\n          </LinkExternal>\n        </Flex>\n      )}\n      {account && isMetaMaskInScope && tokenAddress && (\n        <Flex justifyContent=\"flex-end\">\n          <Button\n            variant=\"text\"\n            p=\"0\"\n            height=\"auto\"\n            onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\n          >\n            <Text color=\"primary\" fontSize=\"14px\">\n              {t('Add to Metamask')}\n            </Text>\n            <MetamaskIcon ml=\"4px\" />\n          </Button>\n        </Flex>\n      )}\n    </ExpandedWrapper>\n  )\n}\n\nexport default React.memo(ExpandedFooter)\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, CardFooter, ExpandableLabel, HelpIcon, useTooltip } from '@pancakeswap/uikit'\nimport { Pool } from 'state/types'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport ExpandedFooter from './ExpandedFooter'\n\ninterface FooterProps {\n  pool: Pool\n  account: string\n  isAutoVault?: boolean\n  totalCakeInVault?: BigNumber\n}\n\nconst ExpandableButtonWrapper = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  button {\n    padding: 0;\n  }\n`\n\nconst Footer: React.FC<FooterProps> = ({ pool, account, isAutoVault = false }) => {\n  const { t } = useTranslation()\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom',\n  })\n\n  return (\n    <CardFooter>\n      <ExpandableButtonWrapper>\n        <Flex alignItems=\"center\">\n          {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\n          {tooltipVisible && tooltip}\n          <Flex ref={targetRef}>\n            <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n          </Flex>\n        </Flex>\n        <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n          {isExpanded ? t('Hide') : t('Details')}\n        </ExpandableLabel>\n      </ExpandableButtonWrapper>\n      {isExpanded && <ExpandedFooter pool={pool} account={account} isAutoVault={isAutoVault} />}\n    </CardFooter>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport { CardHeader, Heading, Text, Flex, Image } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\nconst Wrapper = styled(CardHeader)<{ isFinished?: boolean; background?: string; isPromotedPool?: boolean }>`\n  background: ${({ isFinished, background, theme }) =>\n    isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\n  border-radius: ${({ theme, isPromotedPool }) =>\n    isPromotedPool ? '31px 31px 0 0' : `${theme.radii.card} ${theme.radii.card} 0 0`};\n`\n\nconst StyledCardHeader: React.FC<{\n  earningTokenSymbol: string\n  stakingTokenSymbol: string\n  isAutoVault?: boolean\n  isFinished?: boolean\n  isStaking?: boolean\n  isPromotedPool?: boolean\n}> = ({\n  earningTokenSymbol,\n  stakingTokenSymbol,\n  isFinished = false,\n  isAutoVault = false,\n  isStaking = false,\n  isPromotedPool = false,\n}) => {\n  const { t } = useTranslation()\n  const poolImageSrc = isAutoVault\n    ? `pool-gaur-auto.png`\n    : `pool-${earningTokenSymbol}-${stakingTokenSymbol}.png`.toLocaleLowerCase()\n  const isCakePool = earningTokenSymbol === 'CAKE' && stakingTokenSymbol === 'CAKE'\n  const background = isStaking ? 'bubblegum' : 'cardHeader'\n\n  const getHeadingPrefix = () => {\n    if (isAutoVault) {\n      // vault\n      return t('Auto')\n    }\n    if (isCakePool) {\n      // manual cake\n      return t('Manual')\n    }\n    // all other pools\n    return t('Earn')\n  }\n\n  const getSubHeading = () => {\n    if (isAutoVault) {\n      return t('Automatic restaking')\n    }\n    if (isCakePool) {\n      return t('Earn CAKE, stake CAKE')\n    }\n    return t('Stake %symbol%', { symbol: stakingTokenSymbol })\n  }\n\n  return (\n    <Wrapper isPromotedPool={isPromotedPool} isFinished={isFinished} background={background}>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Flex flexDirection=\"column\">\n          <Heading color={isFinished ? 'textDisabled' : 'body'} scale=\"lg\">\n            {`${getHeadingPrefix()} ${earningTokenSymbol}`}\n          </Heading>\n          <Text color={isFinished ? 'textDisabled' : 'textSubtle'}>{getSubHeading()}</Text>\n        </Flex>\n        <Image src={`/images/pools/${poolImageSrc}`} alt={earningTokenSymbol} width={64} height={64} />\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default StyledCardHeader\n","import React, { useState, useCallback } from 'react'\nimport { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useSousApprove } from 'hooks/useApprove'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { getAddress } from 'utils/addressHelpers'\nimport { Pool } from 'state/types'\n\ninterface ApprovalActionProps {\n  pool: Pool\n  isLoading?: boolean\n}\n\nconst ApprovalAction: React.FC<ApprovalActionProps> = ({ pool, isLoading = false }) => {\n  const { sousId, stakingToken, earningToken } = pool\n  const { t } = useTranslation()\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { onApprove } = useSousApprove(stakingTokenContract, sousId)\n  const { toastSuccess, toastError } = useToast()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const txHash = await onApprove()\n      if (txHash) {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now stake in the %symbol% pool!', { symbol: earningToken.symbol }),\n        )\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError(t('Error'), e?.message)\n    }\n  }, [onApprove, setRequestedApproval, toastSuccess, toastError, t, earningToken])\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <Button\n          isLoading={requestedApproval}\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          disabled={requestedApproval}\n          onClick={handleApprove}\n          width=\"100%\"\n        >\n          {t('Enable')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default ApprovalAction\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Modal, Text, Button, OpenNewIcon, Link } from '@pancakeswap/uikit'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport useTheme from 'hooks/useTheme'\n\ninterface NotEnoughTokensModalProps {\n  tokenSymbol: string\n  onDismiss?: () => void\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst NotEnoughTokensModal: React.FC<NotEnoughTokensModalProps> = ({ tokenSymbol, onDismiss }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  return (\n    <Modal\n      title={t('%symbol% required', { symbol: tokenSymbol })}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      <Text color=\"failure\" bold>\n        {t('Insufficient %symbol% balance', { symbol: tokenSymbol })}\n      </Text>\n      <Text mt=\"24px\">{t('You’ll need %symbol% to stake in this pool!', { symbol: tokenSymbol })}</Text>\n      <Text>\n        {t('Buy some %symbol%, or make sure your %symbol% isn’t in another pool or LP.', {\n          symbol: tokenSymbol,\n        })}\n      </Text>\n      <Button mt=\"24px\" as=\"a\" external href={BASE_EXCHANGE_URL}>\n        {t('Buy')} {tokenSymbol}\n      </Button>\n      <StyledLink href=\"https://yieldwatch.net\" external>\n        <Button variant=\"secondary\" mt=\"8px\" width=\"100%\">\n          {t('Locate Assets')}\n          <OpenNewIcon color=\"primary\" ml=\"4px\" />\n        </Button>\n      </StyledLink>\n      <Button variant=\"text\" onClick={onDismiss}>\n        {t('Close Window')}\n      </Button>\n    </Modal>\n  )\n}\n\nexport default NotEnoughTokensModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button } from '@pancakeswap/uikit'\n\ninterface PercentageButtonProps {\n  onClick: () => void\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst PercentageButton: React.FC<PercentageButtonProps> = ({ children, onClick }) => {\n  return (\n    <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={onClick}>\n      {children}\n    </StyledButton>\n  )\n}\n\nexport default PercentageButton\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { useSousStake } from 'hooks/useStake'\nimport { useSousUnstake } from 'hooks/useUnstake'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport BigNumber from 'bignumber.js'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport PercentageButton from './PercentageButton'\n\ninterface StakeModalProps {\n  isBnbPool: boolean\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst StakeModal: React.FC<StakeModalProps> = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  isRemovingStake = false,\n  onDismiss,\n}) => {\n  const { sousId, stakingToken, userData, stakingLimit, earningToken } = pool\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { onStake } = useSousStake(sousId, isBnbPool)\n  const { onUnstake } = useSousUnstake(sousId, pool.enableEmergencyWithdraw)\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [hasReachedStakeLimit, setHasReachedStakedLimit] = useState(false)\n  const [percent, setPercent] = useState(0)\n  const getCalculatedStakingLimit = () => {\n    if (isRemovingStake) {\n      return userData.stakedBalance\n    }\n    return stakingLimit.gt(0) && stakingTokenBalance.gt(stakingLimit) ? stakingLimit : stakingTokenBalance\n  }\n\n  const usdValueStaked = stakeAmount && formatNumber(new BigNumber(stakeAmount).times(stakingTokenPrice).toNumber())\n\n  useEffect(() => {\n    if (stakingLimit.gt(0) && !isRemovingStake) {\n      const fullDecimalStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n      setHasReachedStakedLimit(fullDecimalStakeAmount.plus(userData.stakedBalance).gt(stakingLimit))\n    }\n  }, [stakeAmount, stakingLimit, userData, stakingToken, isRemovingStake, setHasReachedStakedLimit])\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals)\n      const percentage = Math.floor(convertedInput.dividedBy(getCalculatedStakingLimit()).multipliedBy(100).toNumber())\n      setPercent(Math.min(percentage, 100))\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = getCalculatedStakingLimit().dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  const handleConfirmClick = async () => {\n    setPendingTx(true)\n\n    if (isRemovingStake) {\n      // unstaking\n      try {\n        await onUnstake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Unstaked')}!`,\n          t('Your %symbol% earnings have also been harvested to your wallet!', {\n            symbol: earningToken.symbol,\n          }),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    } else {\n      try {\n        // staking\n        await onStake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Staked')}!`,\n          t('Your %symbol% funds have been staked in the pool!', {\n            symbol: stakingToken.symbol,\n          }),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    }\n  }\n\n  return (\n    <Modal\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {stakingLimit.gt(0) && !isRemovingStake && (\n        <Text color=\"secondary\" bold mb=\"24px\" style={{ textAlign: 'center' }} fontSize=\"16px\">\n          {t('Max stake for this pool: %amount% %token%', {\n            amount: getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0),\n            token: stakingToken.symbol,\n          })}\n        </Text>\n      )}\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image src={`/images/tokens/${stakingToken.symbol}.png`} width={24} height={24} alt={stakingToken.symbol} />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        value={stakeAmount}\n        onUserInput={handleStakeInputChange}\n        currencyValue={stakingTokenPrice !== 0 && `~${usdValueStaked || 0} USD`}\n        isWarning={hasReachedStakeLimit}\n      />\n      {hasReachedStakeLimit && (\n        <Text color=\"failure\" fontSize=\"12px\" style={{ textAlign: 'right' }} mt=\"4px\">\n          {t('Maximum total stake: %amount% %token%', {\n            amount: getFullDisplayBalance(new BigNumber(stakingLimit), stakingToken.decimals, 0),\n            token: stakingToken.symbol,\n          })}\n        </Text>\n      )}\n      <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        {t('Balance: %balance%', {\n          balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\n        })}\n      </Text>\n      <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <PercentageButton onClick={() => handleChangePercent(25)}>25%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(50)}>50%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(75)}>75%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(100)}>MAX</PercentageButton>\n      </Flex>\n      <Button\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0 || hasReachedStakeLimit}\n        mt=\"24px\"\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      {!isRemovingStake && (\n        <StyledLink external href={BASE_EXCHANGE_URL}>\n          <Button width=\"100%\" mt=\"8px\" variant=\"secondary\">\n            {t('Get %symbol%', { symbol: stakingToken.symbol })}\n          </Button>\n        </StyledLink>\n      )}\n    </Modal>\n  )\n}\n\nexport default StakeModal\n","import React from 'react'\nimport { Flex, Text, Button, IconButton, AddIcon, MinusIcon, useModal, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport { useBusdPriceFromToken } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport NotEnoughTokensModal from '../Modals/NotEnoughTokensModal'\nimport StakeModal from '../Modals/StakeModal'\n\ninterface StakeActionsProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakedBalance: BigNumber\n  isBnbPool: boolean\n  isStaked: ConstrainBoolean\n  isLoading?: boolean\n}\n\nconst StakeAction: React.FC<StakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  stakedBalance,\n  isBnbPool,\n  isStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken, stakingLimit, isFinished, userData } = pool\n  const { t } = useTranslation()\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakingTokenPrice = useBusdPriceFromToken(stakingToken.symbol)\n  const stakingTokenPriceAsNumber = stakingTokenPrice && stakingTokenPrice.gt(0) ? stakingTokenPrice.toNumber() : 0\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPriceAsNumber),\n    stakingToken.decimals,\n  )\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPriceAsNumber}\n    />,\n  )\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPriceAsNumber}\n      isRemovingStake\n    />,\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('You’ve already staked the maximum amount you can stake in this pool!'),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  const renderStakeAction = () => {\n    return isStaked ? (\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          <>\n            <Balance bold fontSize=\"20px\" decimals={3} value={stakedTokenBalance} />\n            {stakingTokenPriceAsNumber !== 0 && (\n              <Text fontSize=\"12px\" color=\"textSubtle\">\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={stakedTokenDollarBalance}\n                  prefix=\"~\"\n                  unit=\" USD\"\n                />\n              </Text>\n            )}\n          </>\n        </Flex>\n        <Flex>\n          <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n            <MinusIcon color=\"primary\" width=\"24px\" />\n          </IconButton>\n          {reachStakingLimit ? (\n            <span ref={targetRef}>\n              <IconButton variant=\"secondary\" disabled>\n                <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n              </IconButton>\n            </span>\n          ) : (\n            <IconButton\n              variant=\"secondary\"\n              onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\n              disabled={isFinished}\n            >\n              <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n            </IconButton>\n          )}\n        </Flex>\n        {tooltipVisible && tooltip}\n      </Flex>\n    ) : (\n      <Button disabled={isFinished} onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\n        {t('Stake')}\n      </Button>\n    )\n  }\n\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport {\n  Modal,\n  Text,\n  Button,\n  Heading,\n  Flex,\n  AutoRenewIcon,\n  ButtonMenu,\n  ButtonMenuItem,\n  HelpIcon,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport { useSousHarvest } from 'hooks/useHarvest'\nimport { useSousStake } from 'hooks/useStake'\nimport useToast from 'hooks/useToast'\nimport { Token } from 'config/constants/types'\n\ninterface CollectModalProps {\n  formattedBalance: string\n  fullBalance: string\n  earningToken: Token\n  earningsDollarValue: string\n  sousId: number\n  isBnbPool: boolean\n  isCompoundPool?: boolean\n  onDismiss?: () => void\n}\n\nconst CollectModal: React.FC<CollectModalProps> = ({\n  formattedBalance,\n  fullBalance,\n  earningToken,\n  earningsDollarValue,\n  sousId,\n  isBnbPool,\n  isCompoundPool = false,\n  onDismiss,\n}) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess, toastError } = useToast()\n  const { onReward } = useSousHarvest(sousId, isBnbPool)\n  const { onStake } = useSousStake(sousId, isBnbPool)\n  const [pendingTx, setPendingTx] = useState(false)\n  const [shouldCompound, setShouldCompound] = useState(isCompoundPool)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text mb=\"12px\">{t('Compound: collect and restake CAKE into pool.')}</Text>\n      <Text>{t('Harvest: collect CAKE and send to wallet')}</Text>\n    </>,\n    { placement: 'bottom-end', tooltipOffset: [20, 10] },\n  )\n\n  const handleHarvestConfirm = async () => {\n    setPendingTx(true)\n    // compounding\n    if (shouldCompound) {\n      try {\n        await onStake(fullBalance, earningToken.decimals)\n        toastSuccess(\n          `${t('Compounded')}!`,\n          t('Your %symbol% earnings have been re-invested into the pool!', { symbol: earningToken.symbol }),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    } else {\n      // harvesting\n      try {\n        await onReward()\n        toastSuccess(\n          `${t('Harvested')}!`,\n          t('Your %symbol% earnings have been sent to your wallet!', { symbol: earningToken.symbol }),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    }\n  }\n\n  return (\n    <Modal\n      title={`${earningToken.symbol} ${isCompoundPool ? t('Collect') : t('Harvest')}`}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {isCompoundPool && (\n        <Flex justifyContent=\"center\" alignItems=\"center\" mb=\"24px\">\n          <ButtonMenu\n            activeIndex={shouldCompound ? 0 : 1}\n            scale=\"sm\"\n            variant=\"subtle\"\n            onItemClick={(index) => setShouldCompound(!index)}\n          >\n            <ButtonMenuItem as=\"button\">{t('Compound')}</ButtonMenuItem>\n            <ButtonMenuItem as=\"button\">{t('Harvest')}</ButtonMenuItem>\n          </ButtonMenu>\n          <Flex ml=\"10px\" ref={targetRef}>\n            <HelpIcon color=\"textSubtle\" />\n          </Flex>\n          {tooltipVisible && tooltip}\n        </Flex>\n      )}\n\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"24px\">\n        <Text>{shouldCompound ? t('Compounding') : t('Harvesting')}:</Text>\n        <Flex flexDirection=\"column\">\n          <Heading>\n            {formattedBalance} {earningToken.symbol}\n          </Heading>\n          <Text fontSize=\"12px\" color=\"textSubtle\">{`~${earningsDollarValue || 0} USD`}</Text>\n        </Flex>\n      </Flex>\n\n      <Button\n        mt=\"8px\"\n        onClick={handleHarvestConfirm}\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      <Button variant=\"text\" onClick={onDismiss} pb=\"0px\">\n        {t('Close Window')}\n      </Button>\n    </Modal>\n  )\n}\n\nexport default CollectModal\n","import React from 'react'\nimport { Flex, Text, Button, Heading, useModal, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { Token } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance, getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport { useBusdPriceFromToken } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport CollectModal from '../Modals/CollectModal'\n\ninterface HarvestActionsProps {\n  earnings: BigNumber\n  earningToken: Token\n  sousId: number\n  isBnbPool: boolean\n  isLoading?: boolean\n}\n\nconst HarvestActions: React.FC<HarvestActionsProps> = ({\n  earnings,\n  earningToken,\n  sousId,\n  isBnbPool,\n  isLoading = false,\n}) => {\n  const { t } = useTranslation()\n  const earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\n\n  const earningTokenPrice = useBusdPriceFromToken(earningToken.symbol)\n  const earningTokenPriceAsNumber = earningTokenPrice && earningTokenPrice.gt(0) ? earningTokenPrice.toNumber() : 0\n  const earningTokenDollarBalance = getBalanceNumber(\n    earnings.multipliedBy(earningTokenPriceAsNumber),\n    earningToken.decimals,\n  )\n  const earningsDollarValue = formatNumber(earningTokenDollarBalance)\n\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n  const hasEarnings = earnings.toNumber() > 0\n  const isCompoundPool = sousId === 0\n\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningToken={earningToken}\n      earningsDollarValue={earningsDollarValue}\n      sousId={sousId}\n      isBnbPool={isBnbPool}\n      isCompoundPool={isCompoundPool}\n    />,\n  )\n\n  return (\n    <Flex flexDirection=\"column\" mb=\"16px\">\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          {isLoading ? (\n            <Skeleton width=\"80px\" height=\"48px\" />\n          ) : (\n            <>\n              {hasEarnings ? (\n                <Balance bold fontSize=\"20px\" decimals={5} value={earningTokenBalance} />\n              ) : (\n                <Heading color=\"textDisabled\">0</Heading>\n              )}\n              {earningTokenPriceAsNumber !== 0 && (\n                <Text fontSize=\"12px\" color={hasEarnings ? 'textSubtle' : 'textDisabled'}>\n                  ~\n                  {hasEarnings ? (\n                    <Balance\n                      display=\"inline\"\n                      fontSize=\"12px\"\n                      color=\"textSubtle\"\n                      decimals={2}\n                      value={earningTokenDollarBalance}\n                      unit=\" USD\"\n                    />\n                  ) : (\n                    '0 USD'\n                  )}\n                </Text>\n              )}\n            </>\n          )}\n        </Flex>\n        <Flex>\n          <Button disabled={!hasEarnings} onClick={onPresentCollect}>\n            {isCompoundPool ? t('Collect') : t('Harvest')}\n          </Button>\n        </Flex>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default HarvestActions\n","import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { PoolCategory } from 'config/constants/types'\nimport { Pool } from 'state/types'\nimport ApprovalAction from './ApprovalAction'\nimport StakeActions from './StakeActions'\nimport HarvestActions from './HarvestActions'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\ninterface CardActionsProps {\n  pool: Pool\n  stakedBalance: BigNumber\n}\n\nconst CardActions: React.FC<CardActionsProps> = ({ pool, stakedBalance }) => {\n  const { sousId, stakingToken, earningToken, harvest, poolCategory, userData } = pool\n  // Pools using native BNB behave differently than pools using a token\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const { t } = useTranslation()\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  const needsApproval = !allowance.gt(0) && !isBnbPool\n  const isStaked = stakedBalance.gt(0)\n  const isLoading = !userData\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        {harvest && (\n          <>\n            <Box display=\"inline\">\n              <InlineText color=\"secondary\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                {`${earningToken.symbol} `}\n              </InlineText>\n              <InlineText color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                {t('Earned')}\n              </InlineText>\n            </Box>\n            <HarvestActions\n              earnings={earnings}\n              earningToken={earningToken}\n              sousId={sousId}\n              isBnbPool={isBnbPool}\n              isLoading={isLoading}\n            />\n          </>\n        )}\n        <Box display=\"inline\">\n          <InlineText color={isStaked ? 'secondary' : 'textSubtle'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText color={isStaked ? 'textSubtle' : 'secondary'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? t('Staked') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box>\n        {needsApproval ? (\n          <ApprovalAction pool={pool} isLoading={isLoading} />\n        ) : (\n          <StakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            stakedBalance={stakedBalance}\n            isBnbPool={isBnbPool}\n            isStaked={isStaked}\n          />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CardActions\n","import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport { CardBody, Flex, Text, CardRibbon } from '@pancakeswap/uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Pool } from 'state/types'\nimport AprRow from './AprRow'\nimport { StyledCard, StyledCardInner } from './StyledCard'\nimport CardFooter from './CardFooter'\nimport StyledCardHeader from './StyledCardHeader'\nimport CardActions from './CardActions'\n\nconst PoolCard: React.FC<{ pool: Pool; account: string }> = ({ pool, account }) => {\n  const { sousId, stakingToken, earningToken, isFinished, userData } = pool\n  const { t } = useTranslation()\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const accountHasStakedBalance = stakedBalance.gt(0)\n\n  return (\n    <StyledCard\n      isFinished={isFinished && sousId !== 0}\n      ribbon={isFinished && <CardRibbon variantColor=\"textDisabled\" text={t('Finished')} />}\n    >\n      <StyledCardInner>\n        <StyledCardHeader\n          isStaking={accountHasStakedBalance}\n          earningTokenSymbol={earningToken.symbol}\n          stakingTokenSymbol={stakingToken.symbol}\n          isFinished={isFinished && sousId !== 0}\n        />\n        <CardBody>\n          <AprRow pool={pool} />\n          <Flex mt=\"24px\" flexDirection=\"column\">\n            {account ? (\n              <CardActions pool={pool} stakedBalance={stakedBalance} />\n            ) : (\n              <>\n                <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                  {t('Start earning')}\n                </Text>\n                <UnlockButton />\n              </>\n            )}\n          </Flex>\n        </CardBody>\n        <CardFooter pool={pool} account={account} />\n      </StyledCardInner>\n    </StyledCard>\n  )\n}\n\nexport default PoolCard\n","import React, { useState } from 'react'\nimport { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useCakeVaultContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { Pool } from 'state/types'\n\ninterface ApprovalActionProps {\n  pool: Pool\n  setLastUpdated: () => void\n  isLoading?: boolean\n}\n\nconst ApprovalAction: React.FC<ApprovalActionProps> = ({ pool, isLoading = false, setLastUpdated }) => {\n  const { account } = useWeb3React()\n  const { stakingToken } = pool\n  const cakeVaultContract = useCakeVaultContract()\n  const cakeContract = useCake()\n  const { t } = useTranslation()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n\n  const handleApprove = () => {\n    cakeContract.methods\n      .approve(cakeVaultContract.options.address, ethers.constants.MaxUint256)\n      .send({ from: account })\n      .on('sending', () => {\n        setRequestedApproval(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now stake in the %symbol% vault!', { symbol: stakingToken.symbol }),\n        )\n        setLastUpdated()\n        setRequestedApproval(false)\n      })\n      .on('error', (error) => {\n        console.error(error)\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      })\n  }\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <Button\n          isLoading={requestedApproval}\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          disabled={requestedApproval}\n          onClick={handleApprove}\n          width=\"100%\"\n        >\n          {t('Enable')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default ApprovalAction\n","import BigNumber from 'bignumber.js'\nimport { getBalanceNumber, getFullDisplayBalance, getDecimalAmount } from 'utils/formatBalance'\n\nexport const convertSharesToCake = (\n  shares: BigNumber,\n  cakePerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\n  const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber))\n  const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals)\n  const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals)\n  const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals, decimalsToRound)\n  return { cakeAsNumberBalance, cakeAsBigNumber, cakeAsDisplayBalance }\n}\n\nexport const convertCakeToShares = (\n  cake: BigNumber,\n  cakePerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\n  const amountInShares = new BigNumber(cake.dividedBy(sharePriceNumber))\n  const sharesAsNumberBalance = getBalanceNumber(amountInShares, decimals)\n  const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals)\n  const sharesAsDisplayBalance = getFullDisplayBalance(amountInShares, decimals, decimalsToRound)\n  return { sharesAsNumberBalance, sharesAsBigNumber, sharesAsDisplayBalance }\n}\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport { useTranslation } from 'contexts/Localization'\n\nconst WithdrawalFeeTimer: React.FC<{ secondsRemaining: number }> = ({ secondsRemaining }) => {\n  const { t } = useTranslation()\n  const { days, hours, minutes } = getTimePeriods(secondsRemaining)\n\n  return <Text fontSize=\"14px\">{t('%day%d : %hour%h : %minute%m', { day: days, hour: hours, minute: minutes })}</Text>\n}\n\nexport default WithdrawalFeeTimer\n","import React from 'react'\nimport { Flex, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\nimport { useCakeVault } from 'state/hooks'\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer'\n\nconst UnstakingFeeCountdownRow = () => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    userData: { lastDepositedTime, userShares },\n    fees: { withdrawalFee, withdrawalFeePeriod },\n  } = useCakeVault()\n  const feeAsDecimal = withdrawalFee / 100 || '-'\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new GAUR in the pool.',\n        )}\n      </Text>\n    </>,\n    { placement: 'bottom-start' },\n  )\n\n  const { secondsRemaining, hasUnstakingFee } = useWithdrawalFeeTimer(\n    parseInt(lastDepositedTime, 10),\n    userShares,\n    withdrawalFeePeriod,\n  )\n\n  // The user has made a deposit, but has no fee\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee && userShares.gt(0)\n\n  // Show the timer if a user is connected, has deposited, and has an unstaking fee\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee\n\n  const getRowText = () => {\n    if (noFeeToPay) {\n      return t('Unstaking Fee').toLowerCase()\n    }\n    if (shouldShowTimer) {\n      return t('unstaking fee until')\n    }\n    return t('unstaking fee if withdrawn within 72h')\n  }\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        {noFeeToPay ? '0' : feeAsDecimal}% {getRowText()}\n      </TooltipText>\n      {shouldShowTimer && <WithdrawalFeeTimer secondsRemaining={secondsRemaining} />}\n    </Flex>\n  )\n}\n\nexport default UnstakingFeeCountdownRow\n","import React from 'react'\nimport { Text, Flex, useTooltip, TooltipText } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault } from 'state/hooks'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\n\ninterface FeeSummaryProps {\n  stakingTokenSymbol: string\n  stakeAmount: string\n}\n\nconst FeeSummary: React.FC<FeeSummaryProps> = ({ stakingTokenSymbol, stakeAmount }) => {\n  const { t } = useTranslation()\n  const {\n    fees: { withdrawalFee },\n  } = useCakeVault()\n  const feeAsDecimal = withdrawalFee / 100\n  const feeInCake = (parseFloat(stakeAmount) * (feeAsDecimal / 100)).toFixed(4)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\n        )}\n      </Text>\n    </>,\n    { placement: 'top-start' },\n  )\n\n  return (\n    <>\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        {tooltipVisible && tooltip}\n        <TooltipText ref={targetRef} small>\n          {t('Unstaking Fee')}\n        </TooltipText>\n        <Text fontSize=\"14px\">\n          {stakeAmount ? feeInCake : '-'} {stakingTokenSymbol}\n        </Text>\n      </Flex>\n      <UnstakingFeeCountdownRow />\n    </>\n  )\n}\n\nexport default FeeSummary\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport { useCakeVaultContract } from 'hooks/useContract'\nimport useTheme from 'hooks/useTheme'\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\nimport BigNumber from 'bignumber.js'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { fetchCakeVaultUserData } from 'state/pools'\nimport { Pool } from 'state/types'\nimport { convertCakeToShares } from '../../helpers'\nimport FeeSummary from './FeeSummary'\n\ninterface VaultStakeModalProps {\n  pool: Pool\n  stakingMax: BigNumber\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst VaultStakeModal: React.FC<VaultStakeModalProps> = ({ pool, stakingMax, isRemovingStake = false, onDismiss }) => {\n  const dispatch = useAppDispatch()\n  const { stakingToken } = pool\n  const { account } = useWeb3React()\n  const cakeVaultContract = useCakeVaultContract()\n  const {\n    userData: { lastDepositedTime, userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [percent, setPercent] = useState(0)\n  const { hasUnstakingFee } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares)\n  const cakePriceBusd = usePriceCakeBusd()\n  const usdValueStaked =\n    cakePriceBusd.gt(0) && stakeAmount ? formatNumber(new BigNumber(stakeAmount).times(cakePriceBusd).toNumber()) : ''\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals))\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\n      setPercent(percentage > 100 ? 100 : percentage)\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  const handleWithdrawal = async (convertedStakeAmount: BigNumber) => {\n    setPendingTx(true)\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare)\n    // trigger withdrawAll function if the withdrawal will leave 0.000001 CAKE or less\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000)\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber)\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold)\n\n    if (isWithdrawingAll) {\n      cakeVaultContract.methods\n        .withdrawAll()\n        .send({ from: account })\n        .on('sending', () => {\n          setPendingTx(true)\n        })\n        .on('receipt', () => {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        })\n        .on('error', (error) => {\n          console.error(error)\n          // Remove message from toast before prod\n          toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n          setPendingTx(false)\n        })\n    } else {\n      cakeVaultContract.methods\n        .withdraw(shareStakeToWithdraw.sharesAsBigNumber.toString())\n        // .toString() being called to fix a BigNumber error in prod\n        // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n        .send({ from: account })\n        .on('sending', () => {\n          setPendingTx(true)\n        })\n        .on('receipt', () => {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        })\n        .on('error', (error) => {\n          console.error(error)\n          // Remove message from toast before prod\n          toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n          setPendingTx(false)\n        })\n    }\n  }\n\n  const handleDeposit = async (convertedStakeAmount: BigNumber) => {\n    cakeVaultContract.methods\n      .deposit(convertedStakeAmount.toString())\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      .send({ from: account })\n      .on('sending', () => {\n        setPendingTx(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Staked!'), t('Your funds have been staked in the pool'))\n        setPendingTx(false)\n        onDismiss()\n        dispatch(fetchCakeVaultUserData({ account }))\n      })\n      .on('error', (error) => {\n        console.error(error)\n        // Remove message from toast before prod\n        toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n        setPendingTx(false)\n      })\n  }\n\n  const handleConfirmClick = async () => {\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n    setPendingTx(true)\n    // unstaking\n    if (isRemovingStake) {\n      handleWithdrawal(convertedStakeAmount)\n      // staking\n    } else {\n      handleDeposit(convertedStakeAmount)\n    }\n  }\n\n  return (\n    <Modal\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image src={`/images/tokens/${stakingToken.symbol}.png`} width={24} height={24} alt={stakingToken.symbol} />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        value={stakeAmount}\n        onUserInput={handleStakeInputChange}\n        currencyValue={cakePriceBusd.gt(0) && `~${usdValueStaked || 0} USD`}\n      />\n      <Text mt=\"8px\" ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        {t('Balance: %balance%', { balance: getFullDisplayBalance(stakingMax, stakingToken.decimals) })}\n      </Text>\n      <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(25)}>\n          25%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(50)}>\n          50%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(75)}>\n          75%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(100)}>\n          MAX\n        </StyledButton>\n      </Flex>\n      {isRemovingStake && hasUnstakingFee && (\n        <FeeSummary stakingTokenSymbol={stakingToken.symbol} stakeAmount={stakeAmount} />\n      )}\n      <Button\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0}\n        mt=\"24px\"\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      {!isRemovingStake && (\n        <Button mt=\"8px\" as=\"a\" external href={BASE_EXCHANGE_URL} variant=\"secondary\">\n          {t('Get %symbol%', { symbol: stakingToken.symbol })}\n        </Button>\n      )}\n    </Modal>\n  )\n}\n\nexport default VaultStakeModal\n","import React from 'react'\nimport { Flex, Text, IconButton, AddIcon, MinusIcon, useModal, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport { convertSharesToCake } from '../../../helpers'\nimport VaultStakeModal from '../VaultStakeModal'\n\ninterface HasStakeActionProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n}\n\nconst HasSharesActions: React.FC<HasStakeActionProps> = ({ pool, stakingTokenBalance }) => {\n  const {\n    userData: { userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { stakingToken } = pool\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\n  const cakePriceBusd = usePriceCakeBusd()\n  const stakedDollarValue = cakePriceBusd.gt(0)\n    ? getBalanceNumber(cakeAsBigNumber.multipliedBy(cakePriceBusd), stakingToken.decimals)\n    : 0\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n  const [onPresentUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\">\n        <Balance fontSize=\"20px\" bold value={cakeAsNumberBalance} decimals={5} />\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {cakePriceBusd.gt(0) ? (\n            <Balance value={stakedDollarValue} fontSize=\"12px\" color=\"textSubtle\" decimals={2} prefix=\"~\" unit=\" USD\" />\n          ) : (\n            <Skeleton mt=\"1px\" height={16} width={64} />\n          )}\n        </Text>\n      </Flex>\n      <Flex>\n        <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"24px\" />\n        </IconButton>\n        <IconButton variant=\"secondary\" onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\n          <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n        </IconButton>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default HasSharesActions\n","import React from 'react'\nimport { Flex, Button, useModal, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport VaultStakeModal from '../VaultStakeModal'\nimport HasSharesActions from './HasSharesActions'\n\ninterface VaultStakeActionsProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  accountHasSharesStaked: boolean\n  isLoading?: boolean\n}\n\nconst VaultStakeActions: React.FC<VaultStakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  accountHasSharesStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken } = pool\n  const { t } = useTranslation()\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n\n  const renderStakeAction = () => {\n    return accountHasSharesStaked ? (\n      <HasSharesActions pool={pool} stakingTokenBalance={stakingTokenBalance} />\n    ) : (\n      <Button onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>{t('Stake')}</Button>\n    )\n  }\n\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\n}\n\nexport default VaultStakeActions\n","import BigNumber from 'bignumber.js'\nimport React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useCakeVaultContract } from 'hooks/useContract'\nimport useLastUpdated from 'hooks/useLastUpdated'\nimport { Pool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport VaultApprovalAction from './VaultApprovalAction'\nimport VaultStakeActions from './VaultStakeActions'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\nconst CakeVaultCardActions: React.FC<{\n  pool: Pool\n  accountHasSharesStaked: boolean\n  isLoading: boolean\n}> = ({ pool, accountHasSharesStaked, isLoading }) => {\n  const { account } = useWeb3React()\n  const { stakingToken, userData } = pool\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\n  const cakeContract = useCake()\n  const cakeVaultContract = useCakeVaultContract()\n  const { t } = useTranslation()\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      try {\n        const response = await cakeContract.methods.allowance(account, cakeVaultContract.options.address).call()\n        const currentAllowance = new BigNumber(response)\n        setIsVaultApproved(currentAllowance.gt(0))\n      } catch (error) {\n        setIsVaultApproved(false)\n      }\n    }\n\n    checkApprovalStatus()\n  }, [account, cakeContract, cakeVaultContract, lastUpdated])\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        <Box display=\"inline\">\n          <InlineText\n            color={accountHasSharesStaked ? 'secondary' : 'textSubtle'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText\n            color={accountHasSharesStaked ? 'textSubtle' : 'secondary'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? t('Staked (compounding)') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box>\n        {isVaultApproved ? (\n          <VaultStakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            accountHasSharesStaked={accountHasSharesStaked}\n          />\n        ) : (\n          <VaultApprovalAction pool={pool} isLoading={isLoading} setLastUpdated={setLastUpdated} />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CakeVaultCardActions\n","import React from 'react'\nimport { Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\n\ninterface RecentCakeProfitBalanceProps {\n  cakeToDisplay: number\n  dollarValueToDisplay: number\n  dateStringToDisplay: string\n}\n\nconst RecentCakeProfitBalance: React.FC<RecentCakeProfitBalanceProps> = ({\n  cakeToDisplay,\n  dollarValueToDisplay,\n  dateStringToDisplay,\n}) => {\n  const { t } = useTranslation()\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Balance fontSize=\"16px\" value={cakeToDisplay} decimals={3} bold unit=\" GAUR\" />\n      <Balance fontSize=\"16px\" value={dollarValueToDisplay} decimals={2} bold prefix=\"~$\" />\n      {t('Earned since your last action')}\n      <Text>{dateStringToDisplay}</Text>\n    </>,\n    {\n      placement: 'bottom-end',\n    },\n  )\n\n  return (\n    <>\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        <Balance fontSize=\"14px\" value={cakeToDisplay} />\n      </TooltipText>\n    </>\n  )\n}\n\nexport default RecentCakeProfitBalance\n","import React from 'react'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport RecentCakeProfitBalance from './RecentCakeProfitBalance'\n\nconst RecentCakeProfitCountdownRow = () => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    pricePerFullShare,\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\n  } = useCakeVault()\n  const shouldDisplayCakeProfit =\n    account && cakeAtLastUserAction && cakeAtLastUserAction.gt(0) && userShares && userShares.gt(0)\n  const currentSharesAsCake = convertSharesToCake(userShares, pricePerFullShare)\n  const cakeProfit = currentSharesAsCake.cakeAsBigNumber.minus(cakeAtLastUserAction)\n  const cakeToDisplay = cakeProfit.gte(0) ? getBalanceNumber(cakeProfit, 18) : 0\n  const cakePriceBusd = usePriceCakeBusd()\n  const dollarValueOfCake = cakeProfit.times(cakePriceBusd)\n  const dollarValueToDisplay = dollarValueOfCake.gte(0) ? getBalanceNumber(dollarValueOfCake, 18) : 0\n\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\n  const dateTimeLastAction = new Date(lastActionInMs)\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      <Text fontSize=\"14px\">{t('Recent GAUR profit:')}</Text>\n      {shouldDisplayCakeProfit && (\n        <RecentCakeProfitBalance\n          cakeToDisplay={cakeToDisplay}\n          dollarValueToDisplay={dollarValueToDisplay}\n          dateStringToDisplay={dateStringToDisplay}\n        />\n      )}\n    </Flex>\n  )\n}\n\nexport default RecentCakeProfitCountdownRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, CardBody, Flex, Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport UnlockButton from 'components/UnlockButton'\nimport { useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport AprRow from '../PoolCard/AprRow'\nimport { StyledCard, StyledCardInner } from '../PoolCard/StyledCard'\nimport CardFooter from '../PoolCard/CardFooter'\nimport StyledCardHeader from '../PoolCard/StyledCardHeader'\nimport VaultCardActions from './VaultCardActions'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\nimport RecentCakeProfitRow from './RecentCakeProfitRow'\n\nconst StyledCardBody = styled(CardBody)<{ isLoading: boolean }>`\n  min-height: ${({ isLoading }) => (isLoading ? '0' : '254px')};\n`\n\ninterface CakeVaultProps {\n  pool: Pool\n  showStakedOnly: boolean\n}\n\nconst CakeVaultCard: React.FC<CakeVaultProps> = ({ pool, showStakedOnly }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const { account } = useWeb3React()\n  const {\n    userData: { userShares, isLoading: isVaultUserDataLoading },\n    fees: { performanceFee },\n  } = useCakeVault()\n  //   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\n  const timesCompoundedDaily = 288\n  const accountHasSharesStaked = userShares && userShares.gt(0)\n  const isLoading = !pool.userData || isVaultUserDataLoading\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  if (showStakedOnly && !accountHasSharesStaked) {\n    return null\n  }\n\n  return (\n    <StyledCard isPromoted={{ isDesktop: isXl }}>\n      <StyledCardInner isPromotedPool>\n        <StyledCardHeader\n          isPromotedPool\n          isStaking={accountHasSharesStaked}\n          isAutoVault\n          earningTokenSymbol=\"GAUR\"\n          stakingTokenSymbol=\"GAUR\"\n        />\n        <StyledCardBody isLoading={isLoading}>\n          <AprRow\n            pool={pool}\n            isAutoVault\n            compoundFrequency={timesCompoundedDaily}\n            performanceFee={performanceFeeAsDecimal}\n          />\n          <Box mt=\"24px\">\n            <RecentCakeProfitRow />\n          </Box>\n          <Box mt=\"8px\">\n            <UnstakingFeeCountdownRow />\n          </Box>\n          <Flex mt=\"32px\" flexDirection=\"column\">\n            {account ? (\n              <VaultCardActions pool={pool} accountHasSharesStaked={accountHasSharesStaked} isLoading={isLoading} />\n            ) : (\n              <>\n                <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                  {t('Start earning')}\n                </Text>\n                <UnlockButton />\n              </>\n            )}\n          </Flex>\n        </StyledCardBody>\n        <CardFooter pool={pool} account={account} isAutoVault />\n      </StyledCardInner>\n    </StyledCard>\n  )\n}\n\nexport default CakeVaultCard\n","import React, { useEffect, useMemo, useRef, useState } from 'react'\nimport { Pool } from 'state/types'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Heading, Flex, Image } from '@pancakeswap/uikit'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport { useTranslation } from 'contexts/Localization'\nimport usePersistState from 'hooks/usePersistState'\nimport { usePools, useFetchCakeVault, useFetchPublicPoolsData, usePollFarmsData } from 'state/hooks'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport PageHeader from 'components/PageHeader'\nimport PoolCard from './components/PoolCard'\nimport CakeVaultCard from './components/CakeVaultCard'\nimport _GaurPool from './gaurpool.json'\n\nconst GaurPool:Pool = _GaurPool as any;\n\nconst NUMBER_OF_POOLS_VISIBLE = 12\n\nconst Pools: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const pools = usePools(account)\n  const [stakedOnly, setStakedOnly] = usePersistState(false, 'pancake_pool_staked')\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [finishedPools, openPools] = useMemo(() => partition(pools, (pool) => pool.isFinished), [pools])\n  const stakedOnlyFinishedPools = useMemo(\n    () => finishedPools.filter((pool) => pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)),\n    [finishedPools],\n  )\n  const stakedOnlyOpenPools = useMemo(\n    () => openPools.filter((pool) => pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)),\n    [openPools],\n  )\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0\n\n  // This pool is passed explicitly to the cake vault\n  const cakePoolData = useMemo(() => openPools.find((pool) => pool.sousId === 0), [openPools])\n\n  useFetchCakeVault()\n  useFetchPublicPoolsData()\n  usePollFarmsData()\n\n  useEffect(() => {\n    const showMorePools = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfPoolsVisible((poolsCurrentlyVisible) => poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMorePools, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [observerIsSet])\n\n  return (\n    <>\n      <PageHeader>\n        <Flex justifyContent=\"space-between\" flexDirection={['column', null, 'row']}>\n          <Flex flexDirection=\"column\" mr={['8px', 0]}>\n            <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n              {t('Staking Pools')}\n            </Heading>\n            <Heading scale=\"md\" color=\"text\">\n              {t('Stake your $GAUR token while holding, earn steady interest and be eligible for the IDO whitelist')}\n            </Heading>\n            <Heading scale=\"md\" color=\"text\">\n              {t('High APR, low risk.')}\n            </Heading>\n          </Flex>\n        </Flex>\n      </PageHeader>\n      <Page>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            <>\n              <CakeVaultCard pool={GaurPool} showStakedOnly={stakedOnly} />\n              <PoolCard key={GaurPool.sousId} pool={GaurPool} account={account} />\n            </>\n          </Route>\n        </FlexLayout>\n        <div ref={loadMoreRef} />\n      </Page>\n    </>\n  )\n}\n\nexport default Pools\n"],"sourceRoot":""}