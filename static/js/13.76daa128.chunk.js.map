{"version":3,"sources":["views/Ifos/components/Hero.tsx","hooks/ifo/helpers.ts","hooks/ifo/v2/useGetPublicIfoData.ts","hooks/ifo/v2/useGetWalletIfoData.ts","hooks/useAllowance.ts","views/Ifos/components/IfoLayout.tsx","views/Ifos/components/IfoSteps.tsx","views/Ifos/CurrentIfo.tsx","views/Ifos/index.tsx","hooks/useTokenBalance.ts"],"names":["StyledHero","styled","div","theme","isDark","CurtainBottom","Hero","t","useTranslation","mb","Container","as","scale","bold","fontSize","getStatus","currentBlock","startBlock","endBlock","formatPool","pool","raisingAmountPool","BigNumber","offeringAmountPool","limitPerUserInLP","hasTax","totalAmountPool","sumTaxesOverflow","useGetPublicIfoData","ifo","address","releaseBlockNumber","lpTokenPriceInUsd","useLpTokenPrice","currency","symbol","fastRefresh","useRefresh","useState","status","blocksRemaining","secondsUntilStart","progress","secondsUntilEnd","poolBasic","BIG_ZERO","taxRate","poolUnlimited","startBlockNum","endBlockNum","numberPoints","state","setState","useBlock","contract","useIfoV2Contract","fetchIfoData","useCallback","a","makeBatchRequest","methods","call","viewPoolInformation","viewPoolTaxRateOverflow","poolBasicFormatted","poolUnlimitedFormatted","parseInt","totalBlocks","prev","BSC_BLOCK_TIME","useEffect","currencyPriceInUSD","useGetWalletIfoData","amountTokenCommittedInLP","offeringAmountInToken","refundingAmountInLP","taxAmountInLP","hasClaimed","isPendingTx","account","useWeb3React","allowance","tokenContract","spenderAddress","dependency","setAllowance","res","console","error","fetch","useIfoAllowance","useERC20","getAddress","viewUserInfo","viewUserOfferingAndRefundingAmountsForPools","userInfo","amounts","prevState","setPendingTx","poolId","setIsClaimed","IfoLayout","colors","textSubtle","Wrapper","gradients","bubblegum","mediaQueries","sm","InputWrap","Input","StepperWrap","Stepper","IfoSteps","walletIfoData","hasProfile","useProfile","stepsValidationStatus","useTokenBalance","isGreaterThan","currentStep","setCurrentStep","getStatusProp","index","data","submit","log","currentRef","useRef","moveToStep","step","current","scrollIntoView","renderCardBody","color","type","placeholder","onClick","ref","multiple","textAlign","map","_","activeIfo","ifosConfig","find","isActive","Ifo","useGetPublicIfoV2Data","useGetWalletIfoV2Data","Ifos","useRouteMatch","path","url","isExact","CurrentIfo","useGetBnbBalance","balance","setBalance","useLastUpdated","lastUpdated","setLastUpdated","web3","useWeb3","eth","getBalance","walletBalance","fetchBalance","refresh","tokenAddress","getBep20Contract","balanceOf"],"mappings":"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","file":"static/js/13.76daa128.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Heading, Text } from '@pancakeswap/uikit'\nimport Container from 'components/layout/Container'\nimport { useTranslation } from 'contexts/Localization'\n\nconst getGradient = (isDark: boolean) => {\n  if (isDark) {\n    return 'repeating-linear-gradient(to right, #332453, #332453 40px, #281D44 40px, #281D44 80px)'\n  }\n\n  return 'repeating-linear-gradient(to right, #21d4e2, #21d4e2 40px, #53dee9 40px, #53dee9 80px)'\n}\n\nconst StyledHero = styled.div`\n  background: ${({ theme }) => getGradient(theme.isDark)};\n  padding-bottom: 40px;\n  padding-top: 40px;\n`\n\nconst CurtainBottom = styled.div`\n  background-image: url('/images/curtain-bottom-${({ theme }) => (theme.isDark ? 'dark' : 'light')}.png');\n  background-repeat: repeat-x;\n  background-size: contain;\n  height: 20px;\n`\n\nconst Hero = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Box mb=\"32px\">\n      <StyledHero>\n        <Container>\n          <Heading as=\"h1\" scale=\"xl\" mb=\"24px\">\n            {t('GaurStarter IDO Application')}\n          </Heading>\n          <Text bold fontSize=\"20px\">\n            {t('Welcome to GaurStarter - your best solution to launch a project with completting the required fund raise, build strong and engaged community and enjoy our support!')}\n          </Text>\n        </Container>\n      </StyledHero>\n      <CurtainBottom />\n    </Box>\n  )\n}\n\nexport default Hero\n","import { IfoStatus } from 'config/constants/types'\n\nexport const getStatus = (currentBlock: number, startBlock: number, endBlock: number): IfoStatus => {\n  // Add an extra check to currentBlock because it takes awhile to fetch so the initial value is 0\n  // making the UI change to an inaccurate status\n  if (currentBlock === 0) {\n    return 'idle'\n  }\n\n  if (currentBlock < startBlock) {\n    return 'coming_soon'\n  }\n\n  if (currentBlock >= startBlock && currentBlock <= endBlock) {\n    return 'live'\n  }\n\n  if (currentBlock > endBlock) {\n    return 'finished'\n  }\n\n  return 'idle'\n}\n\nexport default null\n","import { useEffect, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { Ifo, IfoStatus } from 'config/constants/types'\nimport { useBlock, useLpTokenPrice } from 'state/hooks'\nimport { useIfoV2Contract } from 'hooks/useContract'\nimport useRefresh from 'hooks/useRefresh'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { PublicIfoData, PoolCharacteristics } from '../types'\nimport { getStatus } from '../helpers'\n\n// https://github.com/pancakeswap/pancake-contracts/blob/master/projects/ifo/contracts/IFOV2.sol#L431\n// 1,000,000,000 / 100\nconst TAX_PRECISION = 10000000000\n\nconst formatPool = (pool) => ({\n  raisingAmountPool: new BigNumber(pool[0]),\n  offeringAmountPool: new BigNumber(pool[1]),\n  limitPerUserInLP: new BigNumber(pool[2]),\n  hasTax: pool[3],\n  totalAmountPool: new BigNumber(pool[4]),\n  sumTaxesOverflow: new BigNumber(pool[5]),\n})\n\n/**\n * Gets all public data of an IFO\n */\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\n  const { address, releaseBlockNumber } = ifo\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\n  const { fastRefresh } = useRefresh()\n\n  const [state, setState] = useState({\n    status: 'idle' as IfoStatus,\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    poolBasic: {\n      raisingAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      limitPerUserInLP: BIG_ZERO,\n      taxRate: 0,\n      totalAmountPool: BIG_ZERO,\n      sumTaxesOverflow: BIG_ZERO,\n    },\n    poolUnlimited: {\n      raisingAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      limitPerUserInLP: BIG_ZERO,\n      taxRate: 0,\n      totalAmountPool: BIG_ZERO,\n      sumTaxesOverflow: BIG_ZERO,\n    },\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: 0,\n  })\n  const { currentBlock } = useBlock()\n  const contract = useIfoV2Contract(address)\n\n  const fetchIfoData = useCallback(async () => {\n    const [startBlock, endBlock, poolBasic, poolUnlimited, taxRate, numberPoints] = (await makeBatchRequest([\n      contract.methods.startBlock().call,\n      contract.methods.endBlock().call,\n      contract.methods.viewPoolInformation(0).call,\n      contract.methods.viewPoolInformation(1).call,\n      contract.methods.viewPoolTaxRateOverflow(1).call,\n      contract.methods.numberPoints().call,\n    ])) as [string, string, PoolCharacteristics, PoolCharacteristics, number, number]\n\n    const poolBasicFormatted = formatPool(poolBasic)\n    const poolUnlimitedFormatted = formatPool(poolUnlimited)\n\n    const startBlockNum = parseInt(startBlock, 10)\n    const endBlockNum = parseInt(endBlock, 10)\n\n    const status = getStatus(currentBlock, startBlockNum, endBlockNum)\n    const totalBlocks = endBlockNum - startBlockNum\n    const blocksRemaining = endBlockNum - currentBlock\n\n    // Calculate the total progress until finished or until start\n    const progress =\n      currentBlock > startBlockNum\n        ? ((currentBlock - startBlockNum) / totalBlocks) * 100\n        : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\n\n    setState((prev) => ({\n      ...prev,\n      secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n      secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n      poolBasic: { ...poolBasicFormatted, taxRate: 0 },\n      poolUnlimited: { ...poolUnlimitedFormatted, taxRate: taxRate / TAX_PRECISION },\n      status,\n      progress,\n      blocksRemaining,\n      startBlockNum,\n      endBlockNum,\n      numberPoints,\n    }))\n  }, [contract, currentBlock, releaseBlockNumber])\n\n  useEffect(() => {\n    fetchIfoData()\n  }, [fetchIfoData, fastRefresh])\n\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd, fetchIfoData }\n}\n\nexport default useGetPublicIfoData\n","import { useEffect, useState, useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useERC20, useIfoV2Contract } from 'hooks/useContract'\nimport { useIfoAllowance } from 'hooks/useAllowance'\nimport useRefresh from 'hooks/useRefresh'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { getAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { WalletIfoState, WalletIfoData } from '../types'\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\n  const { fastRefresh } = useRefresh()\n  const [state, setState] = useState<WalletIfoState>({\n    poolBasic: {\n      amountTokenCommittedInLP: BIG_ZERO,\n      offeringAmountInToken: BIG_ZERO,\n      refundingAmountInLP: BIG_ZERO,\n      taxAmountInLP: BIG_ZERO,\n      hasClaimed: false,\n      isPendingTx: false,\n    },\n    poolUnlimited: {\n      amountTokenCommittedInLP: BIG_ZERO,\n      offeringAmountInToken: BIG_ZERO,\n      refundingAmountInLP: BIG_ZERO,\n      taxAmountInLP: BIG_ZERO,\n      hasClaimed: false,\n      isPendingTx: false,\n    },\n  })\n\n  const { address, currency } = ifo\n\n  const { account } = useWeb3React()\n  const contract = useIfoV2Contract(address)\n  const currencyContract = useERC20(getAddress(currency.address))\n  const allowance = useIfoAllowance(currencyContract, address)\n\n  const setPendingTx = (status: boolean, poolId: PoolIds) =>\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        isPendingTx: status,\n      },\n    }))\n\n  const setIsClaimed = (poolId: PoolIds) => {\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        hasClaimed: true,\n      },\n    }))\n  }\n\n  const fetchIfoData = useCallback(async () => {\n    const [userInfo, amounts] = await makeBatchRequest([\n      contract.methods.viewUserInfo(account, [0, 1]).call,\n      contract.methods.viewUserOfferingAndRefundingAmountsForPools(account, [0, 1]).call,\n    ])\n\n    setState((prevState) => ({\n      ...prevState,\n      poolBasic: {\n        ...prevState.poolBasic,\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][0]),\n        offeringAmountInToken: new BigNumber(amounts[0][0]),\n        refundingAmountInLP: new BigNumber(amounts[0][1]),\n        taxAmountInLP: new BigNumber(amounts[0][2]),\n        hasClaimed: userInfo[1][0],\n      },\n      poolUnlimited: {\n        ...prevState.poolUnlimited,\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][1]),\n        offeringAmountInToken: new BigNumber(amounts[1][0]),\n        refundingAmountInLP: new BigNumber(amounts[1][1]),\n        taxAmountInLP: new BigNumber(amounts[1][2]),\n        hasClaimed: userInfo[1][1],\n      },\n    }))\n  }, [account, contract])\n\n  useEffect(() => {\n    if (account) {\n      fetchIfoData()\n    }\n  }, [account, fetchIfoData, fastRefresh])\n\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData }\n}\n\nexport default useGetWalletIfoData\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { getLotteryAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useCake } from './useContract'\nimport useRefresh from './useRefresh'\n\n// Retrieve lottery allowance\nexport const useLotteryAllowance = () => {\n  const [allowance, setAllowance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await cakeContract.methods.allowance(account, getLotteryAddress()).call()\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchAllowance()\n    }\n  }, [account, cakeContract, fastRefresh])\n\n  return allowance\n}\n\n// Retrieve IFO allowance\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any): BigNumber => {\n  const { account } = useWeb3React()\n  const [allowance, setAllowance] = useState(BIG_ZERO)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        console.error(e)\n      }\n    }\n\n    if (account) {\n      fetch()\n    }\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n","import styled from 'styled-components'\n\nconst IfoLayout = styled.div`\n  display: grid;\n  grid-gap: 32px;\n  padding: 40px 0;\n  border-top: 2px solid ${({ theme }) => theme.colors.textSubtle};\n`\n\nexport default IfoLayout\n","import React, { useState, useRef } from 'react'\nimport styled from 'styled-components'\nimport every from 'lodash/every'\nimport { Stepper, Step, StepStatus, Card, CardBody, Heading, Text, Button, Link, OpenNewIcon, Input } from '@pancakeswap/uikit'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { Ifo } from 'config/constants/types'\nimport { WalletIfoData } from 'hooks/ifo/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport Container from 'components/layout/Container'\nimport { useProfile } from 'state/hooks'\nimport { getAddress } from 'utils/addressHelpers'\n\ninterface Props {\n  ifo: Ifo\n  walletIfoData: WalletIfoData\n}\n\nconst Wrapper = styled(Container)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n  margin-left: -11px;\n  margin-right: -16px;\n  padding-top: 48px;\n  padding-bottom: 48px;\n  display: flex;\n  justify-content: center;\n    flex-direction: column;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: -24px;\n    margin-right: -24px;\n  }\n\n`\nconst InputWrap = styled(Input)`\n  margin-top: 10;\n  margin-bottom:10px;\n`\nconst StepperWrap = styled(Stepper)`\n  width: 100%;\n`\nconst IfoSteps: React.FC<Props> = ({ ifo, walletIfoData }) => {\n  const { poolBasic, poolUnlimited } = walletIfoData\n  const { hasProfile } = useProfile()\n  const { t } = useTranslation()\n  const balance = useTokenBalance(getAddress(ifo.currency.address))\n  const stepsValidationStatus = [\n    hasProfile,\n    balance.isGreaterThan(0),\n    poolBasic.amountTokenCommittedInLP.isGreaterThan(0) || poolUnlimited.amountTokenCommittedInLP.isGreaterThan(0),\n    poolBasic.hasClaimed || poolUnlimited.hasClaimed,\n  ]\n  const [currentStep, setCurrentStep] = useState(0);\n  const getStatusProp = (index: number): StepStatus => {\n    if (index === currentStep) {\n      return 'current'\n    }\n    if (index < currentStep){\n      return 'past'\n    }\n    return 'future'\n    \n  }\n    const [data, setData] = useState({});\n\n  const submit =()=>{\n    console.log(data)\n  }\n  const currentRef = useRef(null);\n  const moveToStep = (step: number)=>{\n    setCurrentStep(step);\n    console.log(currentRef.current)\n    if(currentRef.current) currentRef.current.scrollIntoView()   \n  }\n  const renderCardBody = (step: number) => {\n    const isStepValid = stepsValidationStatus[step]\n    switch (step) {\n      case 0:\n        return (\n          <CardBody>\n            <Heading as=\"h4\" color=\"secondary\" mb=\"16px\">\n              {t('Contact Details')}\n            </Heading>\n            <InputWrap type=\"text\" scale=\"sm\" placeholder=\"Contact person name: *\" />\n            <InputWrap type=\"text\" scale=\"sm\" placeholder=\"Project's Email to contact you: *\" />\n            <InputWrap type=\"text\" scale=\"sm\" placeholder=\"Telegram contact person: *\" />\n           \n              <Button onClick={()=>moveToStep(1)}>\n                {t('Next step')}\n              </Button>\n\n          </CardBody>\n        )\n      case 1:\n        return (\n          <CardBody>\n            <Heading as=\"h4\" color=\"secondary\" mb=\"16px\" ref={currentStep===0?currentRef:null}>\n              {t('Project Details')}\n            </Heading>\n            <InputWrap type=\"text\" scale=\"sm\" placeholder=\"Project name: *\" />\n            <InputWrap type=\"text\" scale=\"sm\" placeholder=\"Project website: *\" />\n            <InputWrap type=\"text\" scale=\"sm\" placeholder=\"A brief about your project: *\"  multiple/>\n            <InputWrap type=\"text\" scale=\"sm\" placeholder=\"White paper \\ deck link - Link to Google Docs only *\" />\n            <InputWrap type=\"text\" scale=\"sm\" placeholder=\"One Pager - Link to Google Docs only *\" />\n            <InputWrap type=\"text\" scale=\"sm\" placeholder=\"Token Metrics Link - Link to Google Docs only *\" />\n\n            <Button onClick={()=>moveToStep(2)}>\n                {t('Next step')}\n              </Button>\n          </CardBody>\n        )\n      case 2:\n        return (\n          <CardBody>\n            <Heading as=\"h4\" color=\"secondary\" mb=\"16px\" ref={currentStep===1?currentRef:null}>\n              {t('Financials & Fund Raise')}\n            </Heading>\n            <InputWrap type=\"text\" scale=\"sm\" placeholder=\"Token Economy link: *\" />\n            <InputWrap type=\"text\" scale=\"sm\" placeholder=\"Requested fundraise amount: *\" />\n            <InputWrap type=\"text\" scale=\"sm\" placeholder=\"Funds raised up to date: *\" />\n            <InputWrap type=\"text\" scale=\"sm\" placeholder=\"Initial market cap: *\" />\n            <Button onClick={()=>moveToStep(3)}>\n                {t('Next step')}\n              </Button>\n          </CardBody>\n        )\n      case 3:\n        return (\n          <CardBody>\n            <Heading as=\"h4\" color=\"secondary\" mb=\"16px\" ref={currentStep===2?currentRef:null}>\n              {t('Social Network')}\n            </Heading>\n            <InputWrap type=\"text\" scale=\"sm\" placeholder=\"Project's Twitter link: *\" />\n            <InputWrap type=\"text\" scale=\"sm\" placeholder=\"Project's Telegram link *\" />\n            <InputWrap type=\"text\" scale=\"sm\" placeholder=\"How did you hear about GaurStarter? *\" />\n            <Button onClick={submit}>\n                {t('Submit')}\n              </Button>\n          </CardBody>\n        )\n      default:\n        return null\n    }\n  }\n\n  return (\n    <Wrapper>\n      <Heading as=\"h2\" scale=\"xl\" color=\"secondary\" mb=\"24px\" textAlign=\"center\" ref={currentStep===3?currentRef:null}>\n        {t('How to Take Part')}\n      </Heading>\n      <StepperWrap>\n        {stepsValidationStatus.map((_, index) => (\n          // eslint-disable-next-line react/no-array-index-key\n          <Step key={index} index={index} status={getStatusProp(index)}>\n            <Card>{renderCardBody(index)}</Card>\n          </Step>\n        ))}\n      </StepperWrap>\n    </Wrapper>\n  )\n}\n\nexport default IfoSteps\n","import React from 'react'\nimport { ifosConfig } from 'config/constants'\nimport useGetPublicIfoV2Data from 'hooks/ifo/v2/useGetPublicIfoData'\nimport useGetWalletIfoV2Data from 'hooks/ifo/v2/useGetWalletIfoData'\nimport IfoFoldableCard from './components/IfoFoldableCard'\nimport IfoLayout from './components/IfoLayout'\nimport IfoSteps from './components/IfoSteps'\nimport IfoQuestions from './components/IfoQuestions'\n\n/**\n * Note: currently there should be only 1 active IFO at a time\n */\nconst activeIfo = ifosConfig.find((ifo) => ifo.isActive)\n\nconst Ifo = () => {\n  const publicIfoData = useGetPublicIfoV2Data(activeIfo)\n  const walletIfoData = useGetWalletIfoV2Data(activeIfo)\n\n  return (\n    <IfoLayout>\n      <IfoSteps ifo={activeIfo} walletIfoData={walletIfoData} />\n      {/* <IfoQuestions /> */}\n    </IfoLayout>\n  )\n}\n\nexport default Ifo\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Route, useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Flex } from '@pancakeswap/uikit'\nimport Container from 'components/layout/Container'\nimport Hero from './components/Hero'\nimport CurrentIfo from './CurrentIfo'\nimport PastIfo from './PastIfo'\n\nconst Ifos = () => {\n  const { t } = useTranslation()\n  const { path, url, isExact } = useRouteMatch()\n\n  return (\n    <>\n      <Hero />\n      <Container>\n          <CurrentIfo />\n      </Container>\n    </>\n  )\n}\n\nexport default Ifos\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const web3 = useWeb3()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf(account).call()\n      setBalance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n"],"sourceRoot":""}